name: Build, Test and Push Changed CincoDeBio Core Services to Dockerhub on Trigger

on:
  workflow_dispatch:
  push:
    branches:
      - main    # Triggers on direct pushes to main
    paths:
    - 'services/**'
  pull_request:
    types:
      - closed    # Trigger when PR is closed
    branches:
      - main     # Only for PRs targeting main branch
    paths:
    - 'services/**'

jobs:
  build:
    # Only run if PR is merged or if it's a direct push to main
    if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2   # Need at least 2 commits to compare changes

      - name: Get changed files
        id: changed-files
        run: |
          echo "::set-output name=all_changed_files::$(git diff --name-only HEAD^ HEAD | tr '\n' ' ')"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Image
        run: |
          # as sibmanager has a dockerfile in it (this tries to build it, need to resolve this)

          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"

          for dockerfile in $(find ./services -name Dockerfile); do
              dir_of_image=$(dirname $dockerfile)
              relative_dir=${dir_of_image#./}  # Remove leading ./
              multiarch_image_name=1

               # Check if any files in this directory have changed
              if echo "$CHANGED_FILES" | grep -q "$relative_dir"; then
                image_name=$(basename $dir_of_image)
                image_name=${image_name//\//-}
                docker_image_name="${image_name//[^a-zA-Z0-9]/-}"

                echo "Building $docker_image_name"
                docker buildx build --platform linux/arm64,linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/$docker_image_name:latest $dir_of_image --push || multiarch_image_name=0 && echo "Failed to build $docker_image_name"
                
                if [ $multiarch_image_name -ne 1 ]; then
                  echo "Previous command failed"
                  # as the build runner is running on amd64, we can try to build the image for amd64 only (as emulation through qemu is not working on the runner)
                  docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/$docker_image_name:latest $dir_of_image --push || echo "Also failed to build $docker_image_name for amd64 only"
                fi

              fi
              
          done;




